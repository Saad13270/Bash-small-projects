Lab 6: Functions in Bash for Modular Docker Scripts

Objective: Use functions in Bash to modularize Docker operations.

Tasks:
1. Create separate functions for Docker pull, run, and stop operations.
2. Use the functions in a main Bash script workflow.


Documentation:
- The utility of functions in Bash.
- Structuring Docker operations in modular scripts



Prerequisites:
1- An AWS account with administrative access.
2- Docker Deep Dive Course
3- Bash Script Deep Dive Course
4- Complete Previous labs


Implementation Documentation:

1. Introduction

In this lab, we will explore the use of functions in Bash to modularize Docker operations. By breaking down Docker-related tasks into separate functions, we can create more maintainable and reusable scripts. Specifically, we will create functions for Docker pull, run, and stop operations.

2. Script Implementation

Here's the Bash script that accomplishes the tasks:

#!/bin/bash

# Function to pull a Docker image
pull_image() {
    local image_name="$1"
    echo "Pulling the Docker image: $image_name"
    docker pull "$image_name"
}

# Function to run a Docker container
run_container() {
    local image_name="$1"
    echo "Running the Docker container based on: $image_name"
    docker run -it --rm -name "$image_name" "$image_name"
}

# Function to stop a Docker container
stop_container() {
    local container_name="$1"
    echo "Stopping the Docker container: $container_name"
    docker stop "$container_name"
}

# Main script workflow
main() {
    read -p "Enter the name of the Docker image to pull and run: " image_name

    # Pull the Docker image
    pull_image "$image_name"

    # Run the Docker container
    run_container "$image_name"

    # Ask if the user wants to stop the container
    read -p "Do you want to stop the container? (yes/no): " stop_choice
    if [ "$stop_choice" == "yes" ]; then
        # Stop the Docker container
        stop_container "$image_name"
    else
        echo "Container is still running. You can manually stop it later."
    fi
}

# Call the main function to start the script
main



Explanation of the Script

We have defined three separate functions for Docker operations: pull_image, run_container, and stop_container. These functions take the relevant parameter (image name or container name) and perform the respective operation.

In the main function, we first accept the name of the Docker image from the user.

We then call the pull_image function to pull the specified Docker image.

Next, we call the run_container function to run a container based on the pulled image.

After running the container, we ask the user if they want to stop it. If the user chooses to stop it, we call the stop_container function.

3. Running the Script

To run the script, follow these steps:

Save the script in a .sh file, e.g., docker_modular_script.sh.

Make the script executable by running chmod +x docker_modular_script.sh.

Execute the script by running ./docker_modular_script.sh.

Follow the prompts to specify the Docker image, run the container, and optionally stop it.

4. Conclusion

In this lab, we have demonstrated how to use functions in Bash to modularize Docker operations. By organizing the code into functions, we improve code reusability and maintainability. This approach makes it easier to manage Docker-related tasks and create more structured and readable scripts.
